C51 COMPILER V9.02   MY_STATEMACHINE                                                       09/30/2013 10:59:05 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE MY_STATEMACHINE
OBJECT MODULE PLACED IN my_statemachine.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE my_statemachine.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "my_statemachine.h"
   2          
   3          /* define your FSM states below here */
   4          enum eSystem_State{INIT, LEDS_OFF, LED0_ON, LED1_ON};
   5          typedef enum eSystem_State eSystem_State;
   6          
   7          enum switchState{INITB, NOBTN, STOP, B1P, B2P, B21, B12, SNEL, LANGZAAM, ERROR};
   8          typedef  enum switchState switchState;
   9          
  10          /* define your (PRIVATE) function prototypes below here */
  11          void updateContraints();
  12          
  13          /* Globaal omdat boeiend */
  14          static char codering = 0;
  15          static short interval = 10;
  16          
  17          /* FSM entry */
  18          void statemachine (void)
  19          {
  20   1          /* statemachine control */
  21   1          static eSystem_State currentState = INIT; // state-variable
  22   1          static bit stateEntry = TRUE;               // true upon entering a new state
  23   1          eSystem_State nextState  = currentState;
  24   1      
  25   1          /* declare local user-variables below here */
  26   1          static short intervalCount = 0;
  27   1      
  28   1          /* statemachine */
  29   1          switch (currentState) {
  30   2              case INIT:
  31   2                  if (stateEntry) {
  32   3                      // place ENTRY actions of STATE1 here
  33   3                      init_statemachine();
  34   3                  }
  35   2                  else {
  36   3                      // STATE actions; change state if needed
  37   3                      nextState = LEDS_OFF;
  38   3                  }
  39   2                  if (currentState != nextState) {
  40   3                      // place EXIT actions of STATE1 here
  41   3      
  42   3                  }
  43   2                  break;
  44   2              case LEDS_OFF:
  45   2                  if (stateEntry) {
  46   3                      // place ENTRY actions of STATE1 here
  47   3                      if(interval != 0)
  48   3                          P0 |= 1;
  49   3                          P0 |= 2;
  50   3                  }
  51   2                  else {
  52   3                      if(codering > 0) 
  53   3                          updateContraints();
  54   3                      if(interval > 0)
  55   3                          nextState = LED0_ON;
C51 COMPILER V9.02   MY_STATEMACHINE                                                       09/30/2013 10:59:05 PAGE 2   

  56   3                  }
  57   2                  if (currentState != nextState) {
  58   3                      // place EXIT actions of STATE1 here
  59   3                      P0 &= ~(1<<0);
  60   3                      P0 &= ~(1<<1);
  61   3                  }
  62   2                  break;
  63   2              case LED0_ON:
  64   2                  if (stateEntry) {
  65   3                      // place ENTRY actions of STATE1 here
  66   3                      P0 |= 1 << 0;
  67   3                  }
  68   2                  else {
  69   3                      if(codering > 0)
  70   3                          updateContraints();
  71   3                      if(interval == 0)
  72   3                          nextState = LEDS_OFF;
  73   3                      else if(intervalCount < interval)
  74   3                          intervalCount += 10;
  75   3                      else if(intervalCount >= interval)
  76   3                      {
  77   4                          intervalCount = 10;
  78   4                          nextState = LED1_ON;
  79   4                      }  
  80   3                  }
  81   2                  if (currentState != nextState) {
  82   3                      // place EXIT actions of STATE1 here
  83   3                      P0 &= ~(1<<0);
  84   3                  }
  85   2                  break;
  86   2              case LED1_ON:
  87   2                  if (stateEntry) {
  88   3                      // place ENTRY actions of STATE1 here
  89   3                      P0 |= 1 << 1;
  90   3                  }
  91   2                  else {
  92   3                      if(codering > 0)
  93   3                          updateContraints();
  94   3                      if(interval == 0)
  95   3                          nextState = LEDS_OFF;
  96   3                      else if(intervalCount < interval)
  97   3                          intervalCount += 10;
  98   3                      else if(intervalCount >= interval)
  99   3                      {
 100   4                          intervalCount = 10;
 101   4                          nextState = LED0_ON;
 102   4                      }  
 103   3                  }
 104   2                  if (currentState != nextState) {
 105   3                      // place EXIT actions of STATE1 here
 106   3                      P0 &= ~(1<<1);
 107   3                  }
 108   2                  break;
 109   2              default:
 110   2                  // internal error: not possible
 111   2                  currentState = LEDS_OFF;
 112   2                  break;
 113   2          }
 114   1      
 115   1          /* update FSM internals */
 116   1          if (currentState != nextState) 
 117   1          {
C51 COMPILER V9.02   MY_STATEMACHINE                                                       09/30/2013 10:59:05 PAGE 3   

 118   2              /* change of state */
 119   2              stateEntry = TRUE;
 120   2              currentState = nextState;
 121   2          }
 122   1          else if (stateEntry) 
 123   1          {
 124   2              /* state entered */
 125   2              stateEntry = FALSE;
 126   2          }
 127   1      }
 128          
 129          void init_statemachine(void)
 130          {
 131   1          P0=0;
 132   1          P0 |= 1<<7;
 133   1      }
 134          
 135          void switchStateMachine(void)
 136          {
 137   1          /* statemachine control */
 138   1          static switchState currentState = NOBTN; // state-variable
 139   1          static bit stateEntry = TRUE;               // true upon entering a new state
 140   1          switchState nextState  = currentState;
 141   1      
 142   1          /* declare local user-variables below here */
 143   1          bit switch1 = SW1_PRESSED();
 144   1          bit switch2 = SW2_PRESSED();
 145   1      
 146   1          /* statemachine */
 147   1          switch (currentState) {
 148   2              case INITB:
 149   2                  nextState = NOBTN;
 150   2                  break;
 151   2              case NOBTN:
 152   2                  {
 153   3                      if(switch1 & switch2)
 154   3                      {
 155   4                          nextState = STOP;
 156   4                      }
 157   3                      else if(switch1)
 158   3                      {
 159   4                          nextState = B1P;
 160   4                      }
 161   3                      else if(switch2)
 162   3                      {
 163   4                          nextState = B2P;
 164   4                      }
 165   3                  }
 166   2                  break;
 167   2              case STOP:
 168   2                  if (stateEntry) {
 169   3                      // place ENTRY actions of STATE1 here
 170   3                      codering = 1;
 171   3                      P0 |= 1<<6;
 172   3                      P0 |= 1<<7;
 173   3                  }
 174   2                  else {
 175   3                      // STATE actions; change state if needed
 176   3                      if(!switch1 & !switch2)
 177   3                          nextState = NOBTN;
 178   3                  }
 179   2                  if(currentState != nextState)
C51 COMPILER V9.02   MY_STATEMACHINE                                                       09/30/2013 10:59:05 PAGE 4   

 180   2                  {
 181   3                      P0 &= ~(1<<6);
 182   3                      P0 &= ~(1<<7);
 183   3                  }
 184   2                  break;
 185   2              case B1P:
 186   2                  if(stateEntry)
 187   2                  {
 188   3      
 189   3                  }
 190   2                  else
 191   2                  {
 192   3                      if(switch1 & switch2)
 193   3                      {
 194   4                          nextState = B12;
 195   4                      }
 196   3                      else if(!switch1 & !switch2)
 197   3                      {
 198   4                          nextState = SNEL;
 199   4                      }
 200   3                  }
 201   2                  break;
 202   2              case B2P:
 203   2                  if(stateEntry)
 204   2                  {
 205   3      
 206   3                  }
 207   2                  else
 208   2                  {
 209   3                      if(switch1 && switch2)
 210   3                      {
 211   4                          nextState = B21;
 212   4                      }
 213   3                      else if(!switch1 & !switch2)
 214   3                      {
 215   4                          nextState = LANGZAAM;
 216   4                      }
 217   3                  }
 218   2                  break;
 219   2              case B12:
 220   2                  if(stateEntry)
 221   2                  {
 222   3                      P0 |= 1<<6;
 223   3                                      P0 &= ~(1<<7);
 224   3                  }
 225   2                  else
 226   2                  {
 227   3                      if(!switch1 & !switch2)
 228   3                          nextState = NOBTN;
 229   3                  }
 230   2                  break;
 231   2              case B21:
 232   2                  if(stateEntry)
 233   2                  {
 234   3                      P0 |= 1<<7;     
 235   3                                      P0 &= ~(1<<6);
 236   3                  }
 237   2                  else
 238   2                  {
 239   3                      if(!switch1 & !switch2)
 240   3                          nextState = NOBTN;
 241   3                  }
C51 COMPILER V9.02   MY_STATEMACHINE                                                       09/30/2013 10:59:05 PAGE 5   

 242   2                  break;
 243   2              case SNEL:
 244   2                  if(stateEntry)
 245   2                  {
 246   3                      codering = 2;
 247   3                      updateContraints();
 248   3                  }
 249   2                  else
 250   2                      nextState = NOBTN;
 251   2                  break;
 252   2              case LANGZAAM:
 253   2                  if(stateEntry)
 254   2                  {
 255   3                      codering = 3;
 256   3                  }
 257   2                  else
 258   2                      nextState = NOBTN;
 259   2                  break;
 260   2              case ERROR:
 261   2                  if(stateEntry)
 262   2                  {
 263   3                      P0 |= 1<<2;
 264   3                  }
 265   2                  else
 266   2                  {
 267   3                      if(!switch1 & !switch2)
 268   3                          nextState = NOBTN;
 269   3                  }
 270   2                  if(nextState != currentState)
 271   2                  {
 272   3                      P0 &= ~(1<<2);
 273   3                  }
 274   2                  break;
 275   2              default:
 276   2                  nextState = NOBTN;
 277   2                  break;
 278   2              }
 279   1      
 280   1          /* update FSM internals */
 281   1          if (currentState != nextState) 
 282   1          {
 283   2              /* change of state */
 284   2              stateEntry = TRUE;
 285   2              currentState = nextState;
 286   2          }
 287   1          else if (stateEntry) 
 288   1          {
 289   2              /* state entered */
 290   2              stateEntry = FALSE;
 291   2          }
 292   1      }
 293          
 294          void updateContraints(void)
 295          {
 296   1          //Als codering 1 is gaat de machine stopper
 297   1          if(codering == 1)
 298   1              interval = 0;
 299   1      
 300   1          //als codering 2 is gaat de machine sneller
 301   1          if(codering == 2)
 302   1          {
 303   2                      if(interval == 0)
C51 COMPILER V9.02   MY_STATEMACHINE                                                       09/30/2013 10:59:05 PAGE 6   

 304   2                              interval = 10;
 305   2              if(interval == 10)
 306   2                  interval = 50;
 307   2              else if(interval == 50)
 308   2                  interval = 250;
 309   2              else if(interval == 250)
 310   2                  interval = 500;
 311   2              else if(interval == 500)
 312   2                  interval = 1000;
 313   2                      else if(interval == 1000)
 314   2                              interval = 0;
 315   2          }
 316   1      
 317   1          //Als codering 3 is gaat de machine langzamer
 318   1          if(codering == 3)
 319   1          {
 320   2                      if(interval == 0)
 321   2                              interval = 1000;
 322   2              else if(interval == 1000)
 323   2                  interval = 500;
 324   2              else if(interval == 500)
 325   2                  interval = 250;
 326   2              else if(interval == 250)
 327   2                  interval = 50;
 328   2              else if(interval == 50)
 329   2                  interval = 10;
 330   2              else if(interval == 10)
 331   2                  interval = 0;
 332   2          }
 333   1      
 334   1          codering = 0;
 335   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    840    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
